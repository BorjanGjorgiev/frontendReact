import {Button, Form, Input} from "antd";
import { useAuth } from "../context/userAuth";
import {RegisterFormValues} from "./reusable/RegisterFormValues";

function RegisterPage() {
  const [form] = Form.useForm();
  const { registerUser } = useAuth(); // üëà Use the context

  const onFinish = async (values: RegisterFormValues) => {
    const { firstName, lastName, email, password, confirmPassword } = values;

    // Call registerUser from context
    await registerUser(firstName, lastName, email, password, confirmPassword);

    // Optionally reset the form (if registration was successful)
    form.resetFields();
  };

  return (
      <Form
          form={form}
          name="register"
          onFinish={onFinish}
          scrollToFirstError
          style={{ maxWidth: 400, margin: 'auto', marginTop: 50 }}
      >
        <Form.Item
            name="firstName"
            label="–ò–º–µ"
            rules={[{ required: true, message: '–í–Ω–µ—Å–∏ –≥–æ —Ç–≤–æ–µ—Ç–æ –∏–º–µ' }]}
        >
          <Input />
        </Form.Item>

        <Form.Item
            name="lastName"
            label="–ü—Ä–µ–∑–∏–º–µ"
            rules={[{ required: true, message: '–í–Ω–µ—Å–∏ –≥–æ —Ç–≤–æ–µ—Ç–æ –ø—Ä–µ–∑–∏–º–µ' }]}
        >
          <Input />
        </Form.Item>

        <Form.Item
            name="email"
            label="–ï-–ø–æ—à—Ç–∞"
            rules={[
              { required: true, message: '–í–Ω–µ—Å–∏ —ò–∞ —Ç–≤–æ—ò–∞—Ç–∞ –µ-–ø–æ—à—Ç–∞' },
              { type: 'email', message: '–í–Ω–µ—Å–∏ –≤–∞–ª–∏–¥–Ω–∞ –µ-–ø–æ—à—Ç–∞' },
            ]}
        >
          <Input />
        </Form.Item>

        <Form.Item
            name="password"
            label="–õ–æ–∑–∏–Ω–∫–∞"
            rules={[{ required: true, message: '–í–Ω–µ—Å–∏ –ª–æ–∑–∏–Ω–∫–∞' }]}
            hasFeedback
        >
          <Input.Password />
        </Form.Item>

        <Form.Item
            name="confirmPassword"
            label="–ü–æ—Ç–≤—Ä–¥–∏ –ª–æ–∑–∏–Ω–∫–∞"
            dependencies={['password']}
            hasFeedback
            rules={[
              { required: true, message: '–ü–æ—Ç–≤—Ä–¥–∏ —ò–∞ –ª–æ–∑–∏–Ω–∫–∞—Ç–∞' },
              ({ getFieldValue }) => ({
                validator(_, value) {
                  if (!value || getFieldValue('password') === value) {
                    return Promise.resolve();
                  }
                  return Promise.reject(new Error('–õ–æ–∑–∏–Ω–∫–∏—Ç–µ –Ω–µ —Å–µ —Å–æ–≤–ø–∞—ì–∞–∞—Ç'));
                },
              }),
            ]}
        >
          <Input.Password />
        </Form.Item>

        <Form.Item>
          <Button type="primary" htmlType="submit" style={{ width: '100%' }}>
            –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞—ò —Å–µ
          </Button>
        </Form.Item>
      </Form>
  );
}

export default RegisterPage;